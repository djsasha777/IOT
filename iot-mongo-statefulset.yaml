---
apiVersion: v1
kind: Namespace
metadata:
  name: mongodatabase

---
apiVersion: v1
kind: Secret
metadata:
  name: mongodb
  namespace: mongodatabase
type: Opaque
data:
  mongodb-root-password: cm9vdHBhc3N3b3Jk
  mongodb-password: cGFzc3dvcmQ=
  mongodb-replica-set-key: cmVwbGljYXBhc3N3b3Jk

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mongodb
  namespace: mongodatabase
secrets:
- name: mongodb

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-scripts
  namespace: mongodatabase
data:
  setup.sh: |-
    #!/bin/bash
    echo "Advertised Hostname: $MONGODB_ADVERTISED_HOSTNAME"
    if [[ "$MY_POD_NAME" = "mongodb-0" ]]; then
        echo "Pod name matches initial primary pod name, configuring node as a primary"
        export MONGODB_REPLICA_SET_MODE="primary"
    else
        echo "Pod name doesn't match initial primary pod name, configuring node as a secondary"
        export MONGODB_REPLICA_SET_MODE="secondary"
        export MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD="$MONGODB_ROOT_PASSWORD"
        export MONGODB_INITIAL_PRIMARY_PORT_NUMBER="$MONGODB_PORT_NUMBER"
        export MONGODB_ROOT_PASSWORD="" MONGODB_USERNAME="" MONGODB_DATABASE="" MONGODB_PASSWORD=""
    fi
    exec /opt/bitnami/scripts/mongodb/entrypoint.sh /opt/bitnami/scripts/mongodb/run.sh

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
  namespace: mongodatabase
spec:
  serviceName: mongodb-headless
  podManagementPolicy: OrderedReady
  replicas: 2
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: mongodb
      app.kubernetes.io/component: mongodb
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mongodb
        app.kubernetes.io/component: mongodb
    spec:
      serviceAccountName: mongodb
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: mongodb
              namespaces:
              - mongodatabase
              topologyKey: kubernetes.io/hostname
            weight: 1
      securityContext:
        fsGroup: 1001
        sysctls: []
      containers:
      - name: mongodb
        image: docker.io/bitnami/mongodb:4.4.4
        imagePullPolicy: IfNotPresent
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
        command:
        - /scripts/setup.sh
        env:
        - name: BITNAMI_DEBUG
          value: "false"
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: K8S_SERVICE_NAME
          value: "mongodb-headless"
        - name: MONGODB_INITIAL_PRIMARY_HOST
          value: "mongodb-0.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
        - name: MONGODB_ADVERTISED_HOSTNAME
          value: "$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
        - name: MONGODB_USERNAME
          value: "mongodbusername"
        - name: MONGODB_DATABASE
          value: "iotdatabase"
        - name: MONGODB_REPLICA_SET_NAME
          value: "rs0"
        - name: MONGODB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb
              key: mongodb-password
        - name: MONGODB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb
              key: mongodb-root-password
        - name: MONGODB_REPLICA_SET_KEY
          valueFrom:
            secretKeyRef:
              name: mongodb
              key: mongodb-replica-set-key
        - name: ALLOW_EMPTY_PASSWORD
          value: "no"
        - name: MONGODB_SYSTEM_LOG_VERBOSITY
          value: "0"
        - name: MONGODB_DISABLE_SYSTEM_LOG
          value: "no"
        - name: MONGODB_ENABLE_IPV6
          value: "no"
        - name: MONGODB_ENABLE_DIRECTORY_PER_DB
          value: "no"
        ports:
        - containerPort: 27017
          name: mongodb
        livenessProbe:
          exec:
            command:
            - mongo
            - --disableImplicitSessions
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - bash
            - -ec
            - |
              mongo --disableImplicitSessions $TLS_OPTIONS --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep -q 'true'
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        resources:
          limits:
            cpu: 500m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi
        volumeMounts:
        - name: datadir
          mountPath: /bitnami/mongodb
          subPath:
        - name: scripts
          mountPath: /scripts/setup.sh
          subPath: setup.sh
      - name: metrics
        image: docker.io/bitnami/mongodb-exporter:0.11.2
        imagePullPolicy: "IfNotPresent"
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
        command:
        - /bin/bash
        - -ec
        args:
        - |
          /bin/mongodb_exporter --web.listen-address ":9216" --mongodb.uri "mongodb://root:$(echo $MONGODB_ROOT_PASSWORD | sed -r "s/@/%40/g;s/:/%3A/g")@localhost:27017/admin?"
        env:
        - name: MONGODB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb
              key: mongodb-root-password
        volumeMounts:
        ports:
        - name: metrics
          containerPort: 9216
        livenessProbe:
          httpGet:
            path: /
            port: metrics
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /
            port: metrics
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 1
          failureThreshold: 3
          successThreshold: 1
        resources:
          limits:
            cpu: 500m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi
      volumes:
      - name: scripts
        configMap:
          name: mongodb-scripts
          defaultMode: 0755
  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi

---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-headless
  namespace: mongodatabase
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
  - name: mongodb
    port: 27017
    targetPort: mongodb
  selector:
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/component: mongodb

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb-arbiter
  namespace: mongodatabase
spec:
  serviceName: mongodb-arbiter-headless
  selector:
    matchLabels:
      app.kubernetes.io/name: mongodb
      app.kubernetes.io/component: arbiter
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mongodb
        app.kubernetes.io/component: arbiter
    spec:
      serviceAccountName: mongodb
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: mongodb
              namespaces:
              - mongodatabase
              topologyKey: kubernetes.io/hostname
            weight: 1
      securityContext:
        fsGroup: 1001
        sysctls: []
      initContainers:
      containers:
      - name: mongodb-arbiter
        image: docker.io/bitnami/mongodb:4.4.4
        imagePullPolicy: IfNotPresent
        securityContext:
          runAsUser: 1001
        env:
        - name: BITNAMI_DEBUG
          value: "false"
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: MONGODB_REPLICA_SET_NAME
          value: "rs0"
        - name: K8S_SERVICE_NAME
          value: "mongodb-arbiter-headless"
        - name: MONGODB_REPLICA_SET_MODE
          value: "arbiter"
        - name: MONGODB_INITIAL_PRIMARY_HOST
          value: "mongodb-0.mongodb-headless.$(MY_POD_NAMESPACE).svc.cluster.local"
        - name: MONGODB_ADVERTISED_HOSTNAME
          value: "$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
        - name: MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb
              key: mongodb-root-password
        - name: MONGODB_REPLICA_SET_KEY
          valueFrom:
            secretKeyRef:
              name: mongodb
              key: mongodb-replica-set-key
        - name: ALLOW_EMPTY_PASSWORD
          value: "no"
        ports:
        - containerPort: 27017
          name: mongodb
        livenessProbe:
          tcpSocket:
            port: mongodb
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          tcpSocket:
            port: mongodb
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi

---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-arbiter-headless
  namespace: mongodatabase
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: tcp-mongodb
    port: 27017
    targetPort: mongodb
  selector:
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/component: arbiter

---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-metrics
  namespace: mongodatabase
  labels:
    app.kubernetes.io/name: mongodb
spec:
  type: ClusterIP
  ports:
  - port: 9216
    targetPort: metrics
    protocol: TCP
    name: http-metrics
  selector:
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/component: mongodb

---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: mongodb
  namespace: mongodatabase
  labels:
    team: devops-by-example
spec:
  endpoints:
  - port: http-metrics
    interval: 30s
  namespaceSelector:
    matchNames:
    - mongodatabase
  selector:
    matchLabels:
      app.kubernetes.io/name: mongodb

---
